<?php
/**
 * Created by PhpStorm.
 * User: alexey
 * Date: 09.04.2018
 * Time: 22:40
 */

namespace DB;


class DB extends \mysqli
{

    private $host;
    private $username;
    private $passwd;
    private $dbname;

    private $connected=false;

    public function __debugInfo()
    {
        return ['host'=>$this->host,'dbname'=>$this->dbname,'connected'=>$this->connected];
    }


    /**
     * DB constructor.
     * @param string $host
     * @param string $username
     * @param string $passwd
     * @param string $dbname
     */
    public function __construct(string $host, string $username, string $passwd, string $dbname)
    {
        parent::__construct();
        $this->host=$host;
        $this->username=$username;
        $this->passwd=$passwd;
        $this->dbname=$dbname;
    }

    private static $s_host;
    private static $s_username;
    private static $s_passwd;
    private static $s_dbname;

    /**
     * метод для указания данных подключения статичного обьекта базы данных
     * @param string $host
     * @param string $username
     * @param string $passwd
     * @param string $dbname
     */
    public static function setStaticCredentials(string $host, string $username, string $passwd, string $dbname){
        self::$s_host=$host;
        self::$s_username=$username;
        self::$s_passwd=$passwd;
        self::$s_dbname=$dbname;
    }

    /**
     * свойство для хранения статичного обьекта базы данных
     * @var DB
     */
    private static $_db=null;

    /**
     * статичный метод для получения глобального обьекта базы данных
     * @return DB
     */
    static public function GetStaticDB(){
        if(self::$_db==null){
            self::$_db=new DB(self::$s_host,self::$s_username,self::$s_passwd,self::$s_dbname);
        }
        return self::$_db;
    }

    /**
     * функция для подключения к базе
     * вызывается в методах, которым нужна работа с сервером (query, prepare etc)
     */
    private function PrivateConnect()
    {
        if(!$this->connected) {
            parent::connect($this->host, $this->username, $this->passwd, $this->dbname);
            parent::autocommit(false);
            parent::set_charset("utf8");
            $this->connected=true;
        }
    }



    /**
     * @param string $query
     * @param int $resultmode
     * @return bool|\mysqli_result
     */
    public function query($query, $resultmode = MYSQLI_STORE_RESULT)
    {
        $this->PrivateConnect();
        return parent::query($query, $resultmode);
    }

    /**
     * @param string $query
     * @return DBStatement
     */
    public function prepare($query):DBStatement
    {
        $this->PrivateConnect();
        return new DBStatement( parent::prepare($query)); // TODO: Change the autogenerated stub
    }


    public function close()
    {
        if($this->connected) {
            parent::close(); // TODO: Change the autogenerated stub
        }
        $this->connected=false;
    }


}

class DBStatement{
    /** @var \mysqli_stmt */
    private $statement;

    function __construct(\mysqli_stmt $statement)
    {
        $this->statement=$statement;
    }

    /**
     * @param array ...$params
     * @return $this
     */
    function BindParam(...$params){
        call_user_func_array([$this->statement,"bind_param"],$params);
        return $this;
    }

    function Exec(){
        $this->statement->execute();
        return $this;
    }

    function GetResult(){
        return $this->statement->get_result();
    }
}